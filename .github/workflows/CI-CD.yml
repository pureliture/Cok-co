name: Docker Image CI

on:
  push:
    branches: [ develop ]
env:
  # 이미지 이름을 환경변수로 등록합니다.
  IMAGE_NAME: tkdgur1756/tri-pick
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout
        uses: actions/checkout@v2
      
      # Revision를 이미지의 태그로 만들기 위해 값을 생성합니다.
      - name: Get verion
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2 # buildx 설정
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v2
        with:
          images: tkdgur1756/tri-pick
      
      - name: Build and push
        uses: docker/build-push-action@v4 # build-push-action 사용
        with:
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.image.outputs.version }}
          cache-from: type=gha # 여기서 gha 는 Guthub Actions 용 캐시를 의미합니다.
          cache-to: type=gha,mode=max
          platforms: |
            linux/amd64
            linux/arm64
            
  deploy:
    runs-on: ubuntu-latest
    # build job 완료 후 진행
    needs: build

    steps:
      - name: Get verion
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"
      # kustomize 명령을 가져온다.
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Checkout kustomize repository
        uses: actions/checkout@v2
        with:
          # kubernetes 설정정보 저장소
          repository: pureliture/k8s-manifest-repo
          ref: main
          # 다른 저장소에 push 하려면 Personal Access Token이 필요.
          token: ${{ secrets.ACTION_TOKEN }}
          path: k8s-manifest-repo
      # 새 이미지 버전으로 파일 수정
      - name: Update Kubernetes resources
        run: |
          cd k8s-manifest-repo/overlays/dev/
          kustomize edit set image ${{ env.IMAGE_NAME }}:${{ steps.image.outputs.version }}
          cat kustomization.yaml
      # 수정된 파일 commit & push
      - name: Commit files
        run: |
          cd k8s-manifest-repo
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions"
          git commit -am "Update image tag"
          git push -u origin main
